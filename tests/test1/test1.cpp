/*
    Test 1 - test of the distribution of numbers generated by generators
        -> Mersenne-Twister Generator (mt1997)
        -> Linear Congruential Generator
        -> ChaCha20 Generator
        -> Halton Generator
        -> Lagged Fibonnaci Generator
        -> Xoroshiro Generator
*/

#include "./test1.h"
#include "../../generators/random_number_generator.h"
#include "../../generators/mersenne_twister/mersenne_twister_generator.h"
#include "../../generators/linear_congruential/linear_congruential_generator.h"
#include "../../generators/xoroshiro/xoroshiro_generator.h"
#include "../../generators/halton/halton_generator.h"
#include "../../generators/lagged_fibonacci/lagged_fibonacci_generator.h"
#include "../../generators/chacha20/chacha20.h"

#include <iostream>
#include <fstream>
#include <random>
#include <vector>
#include <cmath>
#include <algorithm>
#include <filesystem>

void Test1::run()
{
    std::vector<int> seeds = {12345, 54321, 98765};

    std::vector<RandomNumberGenerator *> generators{
        new ChaCha20Generator(seeds[0]),
        new ChaCha20Generator(seeds[1]),
        new ChaCha20Generator(seeds[2]),

        new HaltonGenerator(10, 1),
        new HaltonGenerator(20, 1),
        new HaltonGenerator(300, 1),

        new LaggedFibonacciGenerator(seeds[0]),
        new LaggedFibonacciGenerator(seeds[1]),
        new LaggedFibonacciGenerator(seeds[2]),

        new LinearCongruentialGenerator(seeds[0]),
        new LinearCongruentialGenerator(seeds[1]),
        new LinearCongruentialGenerator(seeds[2]),

        new XoroshiroGenerator(seeds[0]),
        new XoroshiroGenerator(seeds[1]),
        new XoroshiroGenerator(seeds[2]),

        new MersenneTwisterGenerator(seeds[0]),
        new MersenneTwisterGenerator(seeds[1]),
        new MersenneTwisterGenerator(seeds[2]),
    };

    for (size_t i = 0; i < generators.size(); ++i)
    {
        std::string filename = "./tests/output/" + generators[i]->to_string();
        execute_test(*generators[i], seeds[i], filename);
    }

    // Zwolnienie pamięci z dynamicznie zaalokowanych obiektów
    for (auto *generator : generators)
    {
        delete generator;
    }
}

void Test1::execute_test(RandomNumberGenerator &generator, int seed, const std::string &filename)
{
    const int num_samples = 1000;
    const int num_bins = 10;

    // Generowanie próbek
    std::vector<int> samples(num_samples);
    for (int i = 0; i < num_samples; ++i)
    {
        samples[i] = generate_sample(generator);
    }

    // Tworzenie histogramu
    std::vector<int> histogram(num_bins, 0);
    for (int sample : samples)
    {
        int bin = static_cast<int>(std::floor(sample / (10.0 / num_bins)));
        if (bin >= 0 && bin < num_bins)
        {
            ++histogram[bin];
        }
    }

    // Chi square value
    double expected_frequency = static_cast<double>(num_samples) / num_bins;
    double chi_square = 0.0;
    for (int count : histogram)
    {
        double deviation = count - expected_frequency;
        chi_square += (deviation * deviation) / expected_frequency;
    }

    // Save result to file (overwrites if file exists)
    std::ofstream file(filename, std::ios::out | std::ios::trunc);
    if (!file.is_open())
    {
        std::cerr << "Cannot open file: " << filename << std::endl;
        return;
    }
    file << "Seed: " << seed << std::endl;
    file << "Histogram data:" << std::endl;
    for (int i = 0; i < num_bins; ++i)
    {
        file << "[" << (i * (10.0 / num_bins)) << " - " << ((i + 1) * (10.0 / num_bins)) << "): " << histogram[i] << std::endl;
    }

    file << "Chi-square statistic: " << chi_square << std::endl;

    // Zamknięcie pliku
    file.close();
}

int Test1::generate_sample(RandomNumberGenerator &generator)
{
    std::uniform_real_distribution<double> distribution(0.0, 10.0);
    return static_cast<int>(distribution(generator));
}
